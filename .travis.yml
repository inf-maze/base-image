language: bash
services: docker

matrix:
  include:
    - os: linux
      env: VERSION=1.14-rc VARIANT=buster
    - os: linux
      env: VERSION=1.14-rc VARIANT=alpine3.11
    - os: linux
      env: VERSION=1.13 VARIANT=buster
    - os: linux
      env: VERSION=1.13 VARIANT=stretch
    - os: linux
      env: VERSION=1.13 VARIANT=alpine3.11
    - os: linux
      env: VERSION=1.13 VARIANT=alpine3.10
    - os: linux
      env: VERSION=1.12 VARIANT=buster
    - os: linux
      env: VERSION=1.12 VARIANT=stretch
    - os: linux
      env: VERSION=1.12 VARIANT=alpine3.11
    - os: linux
      env: VERSION=1.12 VARIANT=alpine3.10

install:
  - git clone https://github.com/docker-library/official-images.git ~/official-images

before_script:
  - env | sort
  - cd "$VERSION${VARIANT:+/$VARIANT}"
  - slash='/'; image="golang:$VERSION${VARIANT:+-${VARIANT//$slash/-}}"

script:
  - |
    (
      set -Eeuo pipefail
      set -x
      docker build -t "$image" .
      if [ "$TRAVIS_OS_NAME" = 'windows' ]; then
        # TODO make the tests run successfully on Windows too!
        docker run --rm "$image" go version
        docker run --rm "$image" git --version
        # if we've got nanoserver, let's build test that too
        nanoserverDir="../nanoserver-${VARIANT#windows/windowsservercore-}"
        if [ -f "$nanoserverDir/Dockerfile" ]; then
          nanoserverImage="${image//windowsservercore/nanoserver}"
          nanoserverFromWindows="$(awk -F '[ =]' '$1 == "COPY" && $2 == "--from" { print $3; exit }' "$nanoserverDir/Dockerfile")" # match "COPY --from=..." value
          docker tag "$image" "$nanoserverFromWindows"
          docker build -t "$nanoserverImage" "$nanoserverDir"
          docker run --rm "$nanoserverImage" go version
        fi
      else
        ~/official-images/test/run.sh "$image"
      fi
    )

after_script:
  - docker images

# vim:set et ts=2 sw=2:

